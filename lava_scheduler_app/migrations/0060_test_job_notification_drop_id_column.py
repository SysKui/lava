# Copyright (C) 2023 Collabora Limited
#
# Author: Igor Ponomarev <igor.ponomarev@collabora.com>
#
# SPDX-License-Identifier: GPL-2.0-or-later

# Generated by Django 2.2.26 on 2023-11-27 10:20

import django.db.models.deletion
from django.db import migrations, models


def from_id_to_testjob_field(apps, schema_editor):
    Notification = apps.get_model("lava_scheduler_app", "Notification")
    NotificationCallback = apps.get_model("lava_scheduler_app", "NotificationCallback")
    NotificationRecipient = apps.get_model(
        "lava_scheduler_app", "NotificationRecipient"
    )
    db_alias = schema_editor.connection.alias

    NotificationCallback.objects.using(db_alias).annotate(
        _test_job=models.Subquery(
            Notification.objects.filter(id=models.OuterRef("notification_id")).values(
                "test_job_id"
            )
        )
    ).update(notification_id=models.F("_test_job"))

    NotificationRecipient.objects.using(db_alias).annotate(
        _test_job=models.Subquery(
            Notification.objects.filter(id=models.OuterRef("notification_id")).values(
                "test_job_id"
            )
        )
    ).update(notification_id=models.F("_test_job"))


def from_testjob_to_id_field(apps, schema_editor):
    Notification = apps.get_model("lava_scheduler_app", "Notification")
    NotificationCallback = apps.get_model("lava_scheduler_app", "NotificationCallback")
    NotificationRecipient = apps.get_model(
        "lava_scheduler_app", "NotificationRecipient"
    )
    db_alias = schema_editor.connection.alias

    NotificationCallback.objects.using(db_alias).annotate(
        _notification_id=models.Subquery(
            Notification.objects.filter(
                test_job_id=models.OuterRef("notification_id")
            ).values("id")
        )
    ).update(notification_id=models.F("_notification_id"))

    NotificationRecipient.objects.using(db_alias).annotate(
        _notification_id=models.Subquery(
            Notification.objects.filter(
                test_job_id=models.OuterRef("notification_id")
            ).values("id")
        )
    ).update(notification_id=models.F("_notification_id"))


class Migration(migrations.Migration):
    dependencies = [
        ("lava_scheduler_app", "0059_increase_remoteartifactsauth_token_max_length"),
    ]

    operations = [
        migrations.AlterField(
            model_name="notificationcallback",
            name="notification",
            field=models.ForeignKey(
                null=False,
                on_delete=django.db.models.deletion.CASCADE,
                to_field="test_job",
                verbose_name="Notification",
                to="lava_scheduler_app.Notification",
                db_constraint=False,
            ),
        ),
        migrations.AlterField(
            model_name="notificationrecipient",
            name="notification",
            field=models.ForeignKey(
                null=False,
                on_delete=django.db.models.deletion.CASCADE,
                to_field="test_job",
                verbose_name="Notification",
                to="lava_scheduler_app.Notification",
                db_constraint=False,
            ),
        ),
        migrations.RunPython(from_id_to_testjob_field, from_testjob_to_id_field),
        migrations.RemoveField(
            model_name="notification",
            name="id",
        ),
        migrations.AlterField(
            model_name="notification",
            name="test_job",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                serialize=False,
                to="lava_scheduler_app.TestJob",
            ),
        ),
        migrations.AlterField(
            model_name="notificationcallback",
            name="notification",
            field=models.ForeignKey(
                null=False,
                on_delete=django.db.models.deletion.CASCADE,
                to_field="test_job",
                verbose_name="Notification",
                to="lava_scheduler_app.Notification",
            ),
        ),
        migrations.AlterField(
            model_name="notificationrecipient",
            name="notification",
            field=models.ForeignKey(
                null=False,
                on_delete=django.db.models.deletion.CASCADE,
                to_field="test_job",
                verbose_name="Notification",
                to="lava_scheduler_app.Notification",
            ),
        ),
    ]
