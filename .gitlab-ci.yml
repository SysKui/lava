---
stages:
  - test
  - analyze
  - build
  - deploy

include:
  template: SAST.gitlab-ci.yml

variables:
  # To make sure that latest git tag gets fetched
  # or version() function will fail
  GIT_DEPTH: "100"

###########################
# Templates               #
#                         #
# make sure all jobs use  #
# architecture tags.      #
###########################
.job: &job
  before_script:
    - ./.gitlab-ci/$CI_JOB_STAGE/$CI_JOB_NAME.sh setup
  needs: []
  except: [schedules]
  script:
    - ./.gitlab-ci/$CI_JOB_STAGE/$CI_JOB_NAME.sh

.job_aarch64: &job_aarch64
  <<: *job
  tags:
    - aarch64

.dind: &dind
  <<: *job
  image: docker:24-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
  services:
    - docker:24-dind

#######
# Tests
#######
.dispatcher: &dispatcher
  <<: *job
  stage: test
  image: registry.gitlab.com/lava/ci-images/$CI_JOB_NAME
  artifacts:
    reports:
      junit: dispatcher.xml

.server: &server
  <<: *job
  stage: test
  image: registry.gitlab.com/lava/ci-images/$CI_JOB_NAME
  artifacts:
    reports:
      junit: server.xml

amd64/dispatcher-debian-11: *dispatcher
amd64/server-debian-11: *server
amd64/dispatcher-debian-12: *dispatcher
amd64/server-debian-12:
  <<: *server
  tags:
    - saas-linux-medium-amd64  # 4 way parallel tests
aarch64/dispatcher-debian-11:
  <<: *dispatcher
  tags:
    - aarch64-dind
  only:
    refs:
      - master
aarch64/server-debian-11:
  <<: *server
  tags:
    - aarch64-dind
  only:
    refs:
      - master

###########
# Analyze #
###########
.analyze: &analyze
  <<: *job
  image: registry.gitlab.com/lava/ci-images/amd64/analyze
  stage: analyze
  except:
    refs:
      - tags

black:
  <<: *analyze

code_quality:
  <<: *analyze
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

coverage:
  <<: *analyze
  image: registry.gitlab.com/lava/ci-images/amd64/server-debian-11
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
      - htmlcov/
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

dockerfiles:
  <<: *analyze

schemas:
  <<: *analyze

pylint:
  <<: *analyze

sast:
  stage: analyze
  variables:
    SAST_DEFAULT_ANALYZERS: "bandit"


codespell:
  <<: *analyze

#########
# Build #
#########
doc:
  <<: *job
  stage: build
  image: registry.gitlab.com/lava/ci-images/amd64/pkg-debian-11
  artifacts:
    paths:
      - doc/v2/_build/html

debian/11:
  <<: *job
  stage: build
  except: []
  image: registry.gitlab.com/lava/ci-images/amd64/pkg-debian-11
  artifacts:
    paths:
      - _build/*.deb
      # handle native package - need to publish the source
      - _build/*.tar.xz
      - _build/*.dsc
      - _build/*.changes
      - _build/*.buildinfo

debian/12:
  <<: *job
  stage: build
  except: []
  image: registry.gitlab.com/lava/ci-images/amd64/pkg-debian-12
  artifacts:
    paths:
      - _build/*.deb
      # handle native package - need to publish the source
      - _build/*.tar.xz
      - _build/*.dsc
      - _build/*.changes
      - _build/*.buildinfo

.docker: &docker
  <<: *dind
  stage: build
  before_script:
    - .gitlab-ci/$CI_JOB_STAGE/docker.sh setup
  script:
    - SERVICE="$(echo "$CI_JOB_NAME" | cut -d "-" -f 3)"
    - git fetch --prune --tags --unshallow
    - .gitlab-ci/$CI_JOB_STAGE/docker.sh "$SERVICE"

.docker_aarch64: &docker_aarch64
  <<: *docker
  only:
    refs:
      - master
      - tags
  tags: [aarch64-dind]

docker-amd64-dispatcher: *docker
docker-amd64-server: *docker
docker-aarch64-dispatcher: *docker_aarch64
docker-aarch64-server: *docker_aarch64

##########
# Deploy #
##########
.publish-packages:
  stage: deploy
  needs:
    - debian/11
    - debian/12
  trigger:
    project: lava/lava-apt-repo
  variables:
    PARENT_PROJECT_NAME: $CI_PROJECT_NAME
    PARENT_PROJECT_REF: $CI_COMMIT_REF_NAME

publish-packages/daily:
  extends: .publish-packages
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    LAVA_APT_CHANNEL: daily

publish-packages/release:
  extends: .publish-packages
  only:
    refs:
      - tags
  variables:
    LAVA_APT_CHANNEL: release

pages:
  stage: deploy
  only:
    refs:
      - tags
  needs:
    - doc
  script:
    - cp -a doc/v2/_build/html public
  artifacts:
    paths:
      - public

publish-docs:
  stage: deploy
  only:
    refs:
      - tags
  needs:
    - pages
  trigger:
    project: lava/lava-docs
  variables:
    PARENT_PROJECT_NAME: $CI_PROJECT_NAME
    PARENT_PROJECT_REF: $CI_COMMIT_REF_NAME
